--> Git is distributed version control system for tracking source code during software development. can be used for any document containing code.
	in distributed versioning like git we can work without network connection as we have local copies of all branches. 

--> there are plenty of graphical interfaces for using Git but they don't have all functionality that we have with using comand line.
    using command line we can build some powerful commands which we can't using GUI so comand line is always  perfered.

--> main advantage which Git provides are below: Backup of code, Versioning /history of development, opportunity to undo particular changes, 
	Comparing code at differnt stages of development, collbaration among different developers, We can figure out which developer did mistake,
	we can isolate the different code changes from one another, we can write sample code without disturbing original code, we can switch different 
	context, some git tool even provide opportunity to review code in bits and pieces.

--> git has always 4 stages out of which 3 are local and last 4th on the remote serve.
	1) local working directory : folder which store all content of our project.
	2) staging area: the place which queues changes to commit in future.
	3) Git repository (hidden .git folder in working directory) : manage all commit history to the repository.
	4) remote repository: Final step where we have to save all local things to remote server. 
	5) branches: contain commits or rahter branches are collection of commits to repository.
	   by default when we create repository we get master branch as default branch.

--> To start with github first we should have github account. there are alternative but github is by far most famous among all.
	1) create new repository.
	2) create local folder where we want to keep our local repository install gitbash for windows.
	3) open gitbash from created folder and clone it using git clone reposurl // we have to provide http or ssh url of the repository. http for beginner.

--> git config --global user.name ="username" and git config --global user.email ="emailid" set the basic info to work with in future.
	we can check same by typing git config --global list

--> git status command tell us on which branch you are on currently and also if that branch is in sync with remote repository or not.

--> now to start with let's create sample text file in our local repository.
	1) created start.txt. git status will tell us branch name and will say branch is up to date with remote branch.
	   but it will also tell that there is one untracked file. untracked file means just changes to local which are not even added.
	2) we have to add those changes to staging area. staging area accumulate all such changes so that in future we can commit all of them
	   together as one bunch. we have to add message for that bunch.
	   git add filename : will add file to staging area.
	   git status : now will tell branch name and whether branch is in sync with remote repository. but also it will tell files to commit
	                means those files which are added to staging area but not yet commited.
	3) now we can commit our local file.
	   git commit -m "message for that particular commit which contain all staged changes" 
	   // if we do not give commit message git will invoke editor asking for message.after entering message press escape esc and then type :wq and hit enter to go back.
	   git status: now will tell extra info that local branch(master) is ahead of remote branch(origin/master) by 1 change.(default branch is master obviously)
	   it also tell that working directory is clean means there is nothing present in staging area. and ofcourse no untracked file if nothing which is in
	   unstaged state. i.e. not moved to staging area. 
	   // so now we are getting idea about 3 different local regions. working directory where initial changes resides.
	      staging area where changes reside after git add and then repository(local) where committed changes reside.
	   // before this branches were in sync but not now because git compare only committed changes which are there in local repository.
	   // often remote branches means origin/branchname where local branch is just branchname.
	4) until this step everything was local even commit. thats why our local branch is ahead of remote branch by 1 commit.
	   git push origin master : will push the our commit to remote repository. origin name indicate that changes are being pushed to remote branch of repository.
	   git status: will now tell that local branch is up to date with remote branch.
	   to confirm it go to github account and check repository there must be our new changes.
	   // while we pushing our local commits to remote branch we are interacting to github account so while executing git push origin master
	      gitbash may ask for username and password if they are not configured locally.
	   
--> origin is nothing but name of the remote we have set for our local repository. we usually will deal with only one remote. so adding origin while
    pushing can be omited but recommended to add as best practice. however in case we have multiple remotes we have to specify name which is origin for github.
	there could be other remotes similar to github. similarely if we don't provide branch name it will push branch which is checked out. but by providing name we can 
	even push branch which is created but not checked out (not working currently).
	
--> Two start and project with git we usually will face 3 different scenarios:
	1) We haven't created repository at local as well as at remote. we have to start freshly with beginning.
	   git init repo-name: will initiate empty git repository with given name in that particular folder. git init causes to create all configuration required for git repo.
	   git add, commit and but we can't push until we match it with remote repo. so first we need to go to our github account and create repo (without readme.txt)
	   then copy the url of that repo and then. 
	   git remote add origin repourl; git push origin master; 
	2) we have develpoed code on local project and now thinking to push it to github. process would be exactly same as aboe scenario except we have already changes to add.
	3) there is public repository on github and we want to contribute to it. by git clone we just make local copy of the repository but after developing we will
	   not able to push to remote since remote repo belongs to some other user whose credentials are private ofcourse. so we first need to go to github.comand.
	   fork that git repo by clicking on fork button then copy of that repo will be added under our account and then we clone repo under our account and push the code 
	   to our repo under our account. and then create merge request of our remote repo to original repo from which we had forked.

--> git add . : (git add .) will add all files to stagin area which are modified or added to working directory. which we can commit in bunch.

--> when many people work on same repository it's vvery important habbit to take latest code from remote repository before pushing our code to remote repository.
	git pull origin master: this take latest code of remote repository to the local repository.

--> if some changes are in working directory but not yet in staging area then all such files with such changes are untracked files. i.e. files are not being tracked by git.
    once we move changes to stagin area bu git add filename then those files are being tracked by git. we can get this info by git status.

--> git add doesn't mean adding new file, it means you are adding changes to staging area for upcoming commit. Also when we say something which is moved to staging area,
	that dosen't mean file but particular change in file. So it is very possible and common that two different changes in particular file might belong to differnt region.
	i.e. one change is still not staged and another one is staged. so when we check git status in such case we will get that file in staging as well as working directory.

--> As of now we know that we have to add changes to stagin areas first by using git add and then we  have to commit them. Normally we commit using -m flag for the message.
	for commit. but we can also add and commit both things in single command.
	git commit -am "adding and commiting at same time"  in this cases all the changes which were untracked and were not present in staging area will be added to staging
	area and will be pushed immediately.

--> When we have moved changes in any file by mistake to staging area and now we realised that those changes were not necessary then we can pull back those changes from 
	staging area using git reset HEAD
	i.e. git reset HEAD filename.txt : it will take out filename.txt file from staging area.

--> git reset HEAD filename can help us to move back file from stagin area to the working directory , but still those chnages are physically present in working directory
	and we can again add them to stagina rea. if we want delete those changes even from working directory then we can do that using git checkout -- filename.
	i.e. git checkout -- filename.txt : will delete all changes to that particular file.

--> We many time come across renaming file or moving it from one location to other location in our repository. There could be three different ways to do so and they are 
	indeed different things from git point of view.
	1) rename or move file using windows command mv. mv oldfilename.txt newfilename.txt (for renaming) and mv oldfilename.txt targetpath/placetomove (moving to other location): 
	   when we do this what git think, we have deleted one file and created newer one. so in this case we have to move file explicitly to the staging area 
	   also while moving file we have to add git add -A instead of the git add . (dot) because we are modifying some files as well as adding them to staging area.
	   git add -A : will move all changes to staging area including those changes which include renaming, deleting, adding and editing. git add . works for editing and adding only.
	   now we are free to commit such changes.
	2) rename or move using git command git mv. git mv oldfilename.txt newfilename.txt (for renaming) and  git mv oldfilename.txt targetpath/placetomove (moving to other location):
	   when we do this we don't need to move file with changes explicitly to staging area, git will do it automatically for us. in this case git will not say one file deleted 
	   and other added or something like that which was there in case of the windows command. so we are free to commit directly.
	3) rename or move files directly from file explorer.: in this case since we have not renamed or moved files using git mv command again when we check git status 
	   it will say that one file deleted and another added. However in this case we don't need to use -A flag while moving file to staging area because windows internally store 
	   file temporary in some folder after renaming or moving behind the scene and we don't want to track that unknown folder by our git repository. hence just we need to git
	   add file newname. and we are good to go for commit.

--> above scenarios for moving or renaming behaves similar for deleting file.

--> git log: this command shows all historical commit with latest commits at the top. To exit from that view of commit history we have to type q to quit from view.
	in view each commit will have unique id which almost has 30+ characters. to minimize those character in view we have another command.
	
	git log --abbrev-commit: it will shortened the unique id of command. because anyway usually 6 to 7 are more than suffiecient to uniquely identify the commit.
	
	git log --oneline --graph --decorate : this will provide commit ids shortened as well as commit messages which we had provided. --oneline make it in one line.
	--graph shows branching graph (info) and --decorate help to show commit messages.
	
	git log commitid1...commitid2 : will show all commits between those commits.
	
	git log --since "n days ago" : this command will show all commits since n days. similary we can give hours, minutes, seconds, months, years etc.
	
	git log -- path/filename.txt: will show commit history of particular file. It will not shows changes such as rename or moving from one location to other.
	
	git log --follow -- path/filename.txt will show us all commit history including renaming or moving from one location to other.


--> We can build some complex commands using git in command window, however typing those lengthy command again and again could be tiresome. to avoid this we have git alias.
	we can make alias for any command which get stored in config of the git. all we have to do is store it in config with command starting with ! mark.
	git config --global alias.hist "!git log --oneline --graph --decorate" : will create alias called hist at global level means available to all repositories.
	now we can simple type git hist to achive same result which we could have achieved using git log --oneline --graph --decorate.
	
--> In our repository there could be some files which are useful but we don't want git to track them. that means git will not track any changes nor it will 
	get pushed to remote repository. to handle such scenario all that we need to do is create .gitignore file in repository. which contain simple text lines which tells
	which files we have to ignore.
	ex. filename.txt : ignore particular file from repository.
		filename*.ts: ignore all files whose name starts with filename and have extension .ts.
		folder/ : ignore all file from folder with name foldler.
	// we have to checkin .gitignore file so that in future when someone clone repository he will have that info.
	
--> git pull origin branchname : help us to take latest content from remote repository for that particular branch.
	git push origin branchname: help us to push our local changes to the remote repository for that partiular repository.

--> git status command tell us about the file which is modified but we never knows the the difference in older and newer version of the file. we have separate command for that.
	git diff : this command shows differnce between older and modified version of the file which is not yet staged and present in working directory.

--> in command prompt or gitbash it would be difficult to see comparison of the large files. and hence we need some visual merge and difference coparator tool.
	p4merge is such open source free tool. we can install it. 
	1) after installing add it to path variable os sstem environments variable.
	2) after that set that tool to git configuration as differnce and merge tool by following commands.
		git config --global merge.tool "p4merge"   // set p4merge as merge tool
		git config --global mergetool.path "C:/Program Files/Perforce/p4merge.exe"   //set path for tool
		git config --global mergetool.prompt true   //will ask whether to shows differences with p4merge tool or not.
		git config --global diff.tool "p4merge"   // set p4merge as diff tool
		git config --global difftool.path "C:/Program Files/Perforce/p4merge.exe"   //set path for tool
		git config --global difftool.prompt true   //will ask whether to shows differences with p4merge tool or not.
	// now instead of git diff which shows differences in commandprompt we can use different command which will show differences in the visual tool which would be easier
	    git difftool // will ask whether to open visual merge tool. and eventually will show the differences.

--> every github repository has README.md file when we create repository. that file contain plain text which describe about that repository.
	sometime it contain instruction for people who will clone that repository, how to run project , deploy it and so on. whatever we write in README.md
	automatically get displayed on repo page on github.

--> git diff or git difftool gives us the differnces of modified file. however it shows only those files which are in working directory. 
	to see the differences of changed files which changed since last commit.
	git diff HEAD // will shows all file changes which are present in staging area as well as working directory. 
	git difftool HEAD // will shows staged changes but with visual tool.
	git diff --staged HEAD  // will shows the changes of file which are staged and not in working area. (after git add .)
	git difftool --staged HEAD  // wil shows same output as above command but in visual form.
	// so overall we have three types of differnces.
		1) git diff // only working directory (not staged)
		2) git diff HEAD // working directory + staged
		3) git diff --staged HEAD // only staged
		4) none for commited as we already commited it.
	// above commands by default shows changes of all files in respective areas. to limit that to any single file we can add filename after command type -- filename.txt
		git diff --staged HEAD -- filename.txt // this kind of syntax holds true for all rest diff commands as well.
	// when we use difftool it will shows differences for each files one after other.

--> HEAD always refers to last latest commit that we did in currently checked out branch. hence when we say HEAD in command that often means consider al changes since last commit.
	also we have ~ and ^ signs to derive some of the interesting expressions.
	HEAD^ means previous version of latest commit. HEAD^^ means previous to previous version of latest commit.
	HEAD~3 means just three time previous version of the latest commit. similarely using ~ we can have nth previous version of commit.

--> git diff commitid1 commitid2 // gives the comparison of between two commits. we can use HEAD instead of any of commitid which means commitid of latest commit.

--> Another very famous scenario which we may need is comparing local branch and master branch.
	git difftool branchname origin/branchname // will show difference between local branhc and remote branch. simply we can also compare two different branches.
	be it local or remote.
	// git difftool branchname origin/branchname -- filename.txt comes handy when we want to compare just one file in two differnt branches.

--> git reset --soft commitid : reverse commit to given commitid.
	// this command very useful in different scenarios. when we want to reverse commit. another is important scenario. we commited some changes using any git config but while
	   pushing we are using other git config. sometimes we have original gitconfig only in office network. what happen is when we commit whatever config was there while commiting get 
	   attached to that config. while pushing git refer to same commit which was there while commiting. it does not refer to current config. there may be scenario 
	   config which we used to commit at local don't have rights to push the code. in that case all that we can do is reverse commit using above command and then commit again so that
	   current config will get attached to it which will not give problem while pushing code to remote branch.
	// --soft option reverse commit but still changes would be there in our staging area ready to commit again.
	// --hard option git reset --soft commitid will reverse commit as well as it will remove changes permanently as well.    


-->	git branch -a : will give us list of all branches including local and remote branches. current active branch will have asterik before it's name. remote branches in red color.
	git branch: will give us list of only local branches.
	git branch branchname : will create local branch with given name. 
	git checkout branchname: will point to given local branch name.
	git branch -m oldname newname : this command help us to rename the branch. once we renamed local branch it's remote counterpart would be still there without renaming.
	                                and when we push renamed branch then it will create new counterpart on remote with new name. now again if created branch with old name on local 
									automatically it will start pointing old remote with similar name. we explicitly can set different remote though.
	git branch -d branchname: will delete branch from local.
	git push -d origin branchname : will delete branch from remote . (mostly remote name is origin but it could be different as well.)
	// with git branch we create the brand new branch and then to switch to that branch we have to use git checkout branchname.
	git checkout -b branchname : will create new branch given name and will start pinting to it immediately.
	
--> in any command when we do not provide branch name it takes current branch as branch name. 
	in git log command --graph option will show tree like structure where all commits wil be shown from different branches.
	--decorate option will make displaying branch name for each commit.

--> when delete branch using git branch -d branchname git may show warning message and discard deleting branch if our branch is not merged to it's parent branch.
	because if we deleted branch we may loose the work we have done on that branch. still if we want to delete it forcefully we can use -D flag instead of -d.

-->

--> to merge one branch into other we have to first switch to target branch first. then simply
    git merge sourcebranch -m "message for merging".
	// by default all merges are fast forwarded merges. We explicitly have to tell git that our merge is not fast forward by --no--ff flag.
		git merge sourcebranch --no--ff
<<<<<<< HEAD
	// git merges are fast forwarded by default when we are not parallely working on two or more different branches. in that case if we are merging those many branches
	   one ny one. by default fast forward merge will be only for first merged branch and thenafter it will be not for subsequent branches. this is only when we have cretaed 
	   multiple branches from one branch at same instant (same instant means when those branches are pointing to same commit of parent branch)
	// with fast forward merge in future if we deleted our worked branch after merging we will never come to know whether changes were done with sperate branches
	   or they were directly made in master itself. without fast forward merge (with --no-ff option) we will have tree like structure in git log which will be always 
	   there even after deleting merged branch. name of branch might not be there but there would be evidence that we had created new branch and then merged.
=======
	// sample sample 
	// sample 23
	
	   
	   
	   
	   
	   
	   
	   
	   
>>>>>>> master-clone
	   
	  c1 -> c2 -> c3 -> created new branch  C1 -> C2  merged into master : git log will look like : c1 -> c2 -> c3 -> C1 -> C2      ------> fast forwarded merge
	  
	  c1 -> c2 -> c3 -> created new branch  C1 -> C2  merged into master : git log will look like : c1 -> c2 -> c3               ------> with --no-ff no fast forward.
	                                                                                                              \ C1 -> C2 -> /
																												  
--> sample change
	   
	   
	   
	   
	   
	   
	 